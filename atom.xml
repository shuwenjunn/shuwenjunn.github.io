<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shuwenjunn.github.io</id>
    <title>shu’s blog</title>
    <updated>2020-06-05T13:13:09.965Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shuwenjunn.github.io"/>
    <link rel="self" href="https://shuwenjunn.github.io/atom.xml"/>
    <logo>https://shuwenjunn.github.io/images/avatar.png</logo>
    <icon>https://shuwenjunn.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, shu’s blog</rights>
    <entry>
        <title type="html"><![CDATA[JavaScript数组方法速查手册极简版]]></title>
        <id>https://shuwenjunn.github.io/post/javascript-shu-zu-fang-fa-su-cha-shou-ce-ji-jian-ban/</id>
        <link href="https://shuwenjunn.github.io/post/javascript-shu-zu-fang-fa-su-cha-shou-ce-ji-jian-ban/">
        </link>
        <updated>2020-06-05T06:59:11.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-数组属性">1 数组属性</h2>
<h3 id="11-length-长度属性">1.1 length-长度属性</h3>
<p>每个数组都有一个length属性。针对稠密数组，length属性值代表数组中元素的个数。当数组是稀疏数组时，length属性值大于元素的个数。</p>
<pre><code>var array1 = [ 'a', 'b', 'c' ];  
console.log(array1.length);  // 输出 3
array1.length = 2;
console.log(array1);  // 输出 [ &quot;a&quot;, &quot;b&quot; ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/length">查看示例程序</a></p>
<h2 id="2-数组方法">2 数组方法</h2>
<h3 id="21-arrayisarray-类型判定">2.1 Array.isArray-类型判定</h3>
<p><code>Array.isArray()</code> 数组类型判定。</p>
<pre><code>console.log(Array.isArray([1, 2, 3]));   // 输出 true
console.log(Array.isArray({num: 123}));   //输出 false

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/isArray">查看示例程序</a></p>
<h3 id="22-arrayof-创建数组">2.2 Array.of-创建数组</h3>
<p><code>Array.of()</code> 从可变数量的参数创建数组，不管参数的数量或类型如何。</p>
<pre><code>console.log(Array.of(3));    // 输出 [3]
console.log(Array.of(1,2,3));   // 输出 [1,2,3]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/of">查看示例程序</a></p>
<h3 id="23-arrayfrom-创建数组">2.3 Array.from-创建数组</h3>
<p><code>Array.from()</code>  用类数组或可迭代对象创建新数组。</p>
<pre><code>console.log(Array.from('abcd'));  // 输出 [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]
console.log(Array.from([1, 2, 3], x =&gt; x + 1));  // 输出 [ 2, 3, 4 ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/from">查看示例程序</a></p>
<h2 id="3-数组原型方法">3 数组原型方法</h2>
<h3 id="31-查找元素">3.1 查找元素</h3>
<h4 id="311-find-按函数查找">3.1.1 find-按函数查找</h4>
<p><code>Array.prototype.find()</code>  找到第一个满足检测函数条件的元素，并返回该元素，没找到则返回 undefined。</p>
<pre><code>var array1 = [1, 2, 3, 4, 5];
console.log(array1.find(x =&gt; x &gt; 3));    // 输出  4

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/find">查看示例程序</a></p>
<h4 id="312-findindex-按函数查找">3.1.2 findIndex-按函数查找</h4>
<p><code>Array.prototype.findIndex()</code> 找到第一个满足检测函数条件的元素，并返回该元素索引。找不到返回-1。</p>
<pre><code>var array1 = [6, 7, 8, 9, 10];
console.log(array1.findIndex(x =&gt; x &gt; 8));    // 输出  3

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/findIndex">查看示例程序</a></p>
<h4 id="313-indexof-按元素值查找">3.1.3 indexOf-按元素值查找</h4>
<p><code>Array.prototype.indexOf()</code>  查找元素并返回元素索引值，找不到返回-1。</p>
<pre><code>var arr= [1, 2, 3, 4];
console.log(arr.indexOf(3));    // 输出 2
console.log(arr.indexOf(6));    // 输出 -1
console.log(arr.indexOf(2, 2));    // 输出 -1

</code></pre>
<p>第二个参数表示查找的起始位置。</p>
<p><a href="http://30ke.cn/code/js-array-method/indexOf">查看示例程序</a></p>
<h4 id="314-lastindexof-按元素值查找">3.1.4 lastIndexOf-按元素值查找</h4>
<p><code>Array.prototype.lastIndexOf()</code>  从后向前查找元素并返回元素索引值，找不到返回 -1。</p>
<pre><code>var arr = ['a', 'b', 'c', 'd'];
console.log(arr.lastIndexOf('b'));    // 输出 1
console.log(arr.lastIndexOf('e'));    // 输出 -1

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/lastIndexOf">查看示例程序</a></p>
<h3 id="32-添加元素">3.2 添加元素</h3>
<h4 id="321-push-尾部添加">3.2.1 push-尾部添加</h4>
<p><code>Array.prototype.push()</code>  在尾部添加一个或多个元素，返回数组的新长度。</p>
<pre><code>var array1= ['a', 'b', 'c'];
console.log(array1.push('d'));   // 输出 4
console.log(array1);   // 输出 [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/push">查看示例程序</a></p>
<h4 id="322-unshift-头部添加">3.2.2 unshift-头部添加</h4>
<p><code>Array.prototype.unshift()</code>  在头部添加一个或多个元素，并返回数组的新长度。</p>
<pre><code>var array1 = [ 4, 5, 6 ];
console.log(array1.unshift(3));    // 输出 4
console.log(array1);    // 输出 [ 3, 4, 5, 6 ]
console.log(array1.unshift(1, 2));    // 输出 6
console.log(array1);    // 输出 [ 1, 2, 3, 4, 5, 6 ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/unshift">查看示例程序</a></p>
<h3 id="33-删除元素">3.3 删除元素</h3>
<h4 id="331-pop-尾部删除">3.3.1 pop-尾部删除</h4>
<p><code>Array.prototype.pop()</code>  从尾部删除一个元素，并返回该元素。</p>
<pre><code>var array1= ['a', 'b', 'c', 'd'];
console.log(array1.pop());    // 输出 d
console.log(array1);    // 输出 [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/pop">查看示例程序</a></p>
<h4 id="332-shift-头部删除">3.3.2 shift-头部删除</h4>
<p><code>Array.prototype.shift()</code>  从头部删除一个元素，并返回该元素。</p>
<pre><code>var array1 = [1, 2, 3];
console.log(array1.shift());    // 输出 1
console.log(array1);    // 输出 [ 2, 3 ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/shift">查看示例程序</a></p>
<h3 id="34-替换元素">3.4 替换元素</h3>
<h4 id="341-splice-添加替换删除">3.4.1 splice-添加替换删除</h4>
<p><code>Array.prototype.splice()</code> 添加、替换、删除元素。会改变原数组。</p>
<pre><code>var array1 = [ 'a', 'c', 'd' ];
array1.splice( 1, 0, 'b');
console.log(array1);    // 输出 [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]
array1.splice(1,1);
console.log(array1);    // 输出 [ &quot;a&quot;, &quot;c&quot;, &quot;d&quot; ]
array1.splice(1,1,'bb','cc');
console.log(array1);    // 输出 [ &quot;a&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;d&quot; ]

</code></pre>
<blockquote>
<pre><code>array.splice(start[, deleteCount[, item1[, item2[, ...]]]])
</code></pre>
</blockquote>
<ul>
<li>参数 <code>start</code>：表示替换的位置</li>
<li>参数 <code>deleteCount</code> ：表示删除元素的数量</li>
<li>参数 <code>item1...</code> ： 表示添加的元素</li>
</ul>
<p><a href="http://30ke.cn/code/js-array-method/splice">查看示例程序</a></p>
<h3 id="35-顺序相关">3.5 顺序相关</h3>
<h4 id="351-sort-排序">3.5.1 sort-排序</h4>
<p><code>Array.prototype.sort()</code> 数组排序，改变原数组。</p>
<pre><code>var array1 = [ 4, 3, 10, 2 ];
console.log(array1.sort());    // 输出 [ 10, 2, 3, 4 ]
console.log(array1.sort((x1, x2) =&gt; x1 &gt; x2));    // 输出 [ 2, 3, 4, 10 ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/sort">查看示例程序</a></p>
<h4 id="352-reverse-反序">3.5.2 reverse-反序</h4>
<p><code>Array.prototype.reverse()</code>  倒置数组，并返回新数组。会改变原数组。</p>
<pre><code>var sourceArray= [ 'a', 'b', 'c' ];
var reverseArray = sourceArray.reverse();
console.log(reverseArray);    // 输出 [ &quot;c&quot;, &quot;b&quot;, &quot;a&quot; ]
console.log(sourceArray == reverseArray);    // 输出 true

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/reverse">查看示例程序</a></p>
<h3 id="36-遍历迭代">3.6 遍历迭代</h3>
<h4 id="361-keys-键迭代器">3.6.1 keys-键迭代器</h4>
<p><code>Array.prototype.keys()</code> 数组的键迭代器。</p>
<pre><code>var array1 = ['a', 'b', 'c'];
for (let key of array1.keys()) {
  console.log(key);     // 输出 0, 1, 2
}

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/keys">查看示例程序</a></p>
<h4 id="362-values-值迭代器">3.6.2 values-值迭代器</h4>
<p><code>Array.prototype.values()</code>  数组的值迭代器。</p>
<pre><code>const array1 = ['a', 'b', 'c'];
const iterator = array1.values();
for (const value of iterator) {
  console.log(value);     // 输出 a b c
}

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/values">查看示例程序</a></p>
<h4 id="363-entries-键值对迭代器">3.6.3 entries-键/值对迭代器</h4>
<p><code>Array.prototype.entries()</code>  数组的键/值对迭代器。</p>
<pre><code>var array1 = ['a', 'b', 'c'];
var iterator1 = array1.entries();
console.log(iterator1.next().value);    // 输出 Array [0, &quot;a&quot;]
console.log(iterator1.next().value);    // 输出 Array [ 1, &quot;b&quot; ] 

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/entries">查看示例程序</a></p>
<h4 id="364-foreach-遍历">3.6.4 forEach-遍历</h4>
<p><code>Array.prototype.forEach()</code> 遍历数组中的元素，并执行回调函数。</p>
<pre><code>var arr = [1, 2, 3, 4];
arr.forEach(function (x) {
    console.log(x + 1);    // 输出 2  3  4  5
});    

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/forEach">查看示例程序</a></p>
<h3 id="37-检测">3.7 检测</h3>
<h4 id="371-includes-值包含检测">3.7.1 includes-值包含检测</h4>
<p><code>Array.prototype.includes()</code>  值包含检测，如包含返回 true，不包含返回false。</p>
<pre><code>var array1 = [1, 2, 3];
console.log(array1.includes(2));    // 输出 true
console.log(array1.includes(4));    // 输出 false

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/includes">查看示例程序</a></p>
<h4 id="372-some-函数包含检测">3.7.2 some-函数包含检测</h4>
<p><code>Array.prototype.some()</code>  检测数组中是否有元素可以通过检测函数验证。</p>
<pre><code class="language-js">var array1 = [ 1, 2, 3, 4 ];
console.log(array1.some(x =&gt; x &gt;3));    // 输出  true
console.log(array1.some(x =&gt; x &gt; 5));    // 输出  false

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/some">查看示例程序</a></p>
<h4 id="373-every-函数完全检测">3.7.3 every-函数完全检测</h4>
<p><code>Array.prototype.every()</code> 检测数组中是否所有元素都可以通过检测函数验证。</p>
<pre><code class="language-js">var array1 = [ 1, 2, 3, 4, 5 ];
console.log(array1.every(x =&gt; x &lt; 8));    //输出 true
console.log(array1.every(x =&gt; x &lt; 4));    //输出 false

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/every">查看示例程序</a></p>
<h3 id="38-合并">3.8 合并</h3>
<h4 id="381-join-合并成字符串">3.8.1 join-合并成字符串</h4>
<p><code>Array.prototype.join()</code> 合并数组中所有元素成为字符串并返回。</p>
<pre><code class="language-js">var array1= [ 'a', 'b', 'c' ];
console.log(array1.join());    // 输出 a,b,c
console.log(array1.join(&quot;-&quot;));   // 输出 a-b-c

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/join">查看示例程序</a></p>
<h4 id="382-concat-合并成数组">3.8.2 concat-合并成数组</h4>
<p><code>Array.prototype.concat()</code>  合并两个或多个数组，返回一个全新数组，原数组不变。</p>
<pre><code class="language-js">var array1 = [ 'a', 'b' ];
var array2 = [ 'c', 'd' ];
console.log(array1.concat(array2));    // 输出 [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]

</code></pre>
<p>该方法可以有多个参数。</p>
<p><a href="http://30ke.cn/code/js-array-method/concat">查看示例程序</a></p>
<h3 id="39-累计">3.9 累计</h3>
<h4 id="391-reduce-左侧累计">3.9.1 reduce-左侧累计</h4>
<p><code>Array.prototype.reduce()</code> 从左至右按 <code>reducer</code> 函数组合元素值，并返回累计器终值。</p>
<pre><code class="language-js">const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) =&gt; accumulator + currentValue;
// 1 + 2 + 3 + 4
console.log(array1.reduce(reducer));    // 输出 10
// 5 + 1 + 2 + 3 + 4
console.log(array1.reduce(reducer, 5));    // 输出 15，其中5是累计器初始值。

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/reduce">查看示例程序</a></p>
<h4 id="392-reduceright-右侧累计">3.9.2 reduceRight-右侧累计</h4>
<p><code>Array.prototype.reduceRight()</code> 从右至左按 <code>reducer</code> 函数组合元素值，并返回累计器终值。</p>
<pre><code class="language-js">const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) =&gt; accumulator.concat(currentValue);
console.log(array1.reduceRight(reducer));    // 输出 [ 4, 3, 2, 1 ]
console.log(array1.reduceRight(reducer, 5));    // 输出 [ 5, 4, 3, 2, 1 ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/reduceRight">查看示例程序</a></p>
<h3 id="310-copywithin-内部复制">3.10 copyWithin-内部复制</h3>
<p><code>Array.prototype.copyWithin()</code>  数组内部复制，不改变原数组长度。</p>
<pre><code>var array1 = ['a', 'b', 'c', 'd', 'e','f'];
console.log(array1.copyWithin(0, 3, 5));    // 输出 [ &quot;d&quot;, &quot;e&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot; ]
console.log(array1.copyWithin(1, 3));    // 输出 [ &quot;d&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;e&quot;, &quot;f&quot; ]

</code></pre>
<blockquote>
<pre><code class="language-js">arr.copyWithin(target[, start[, end]])
</code></pre>
</blockquote>
<ul>
<li>参数<code>target</code> : 表示要复制到的索引位置，如为负值则从后向前计数。</li>
<li>参数<code>start</code> : 表示要复制序列的起始索引位置，如为负值则从后向前计数。如省略该值，则从索引0开始。</li>
<li>参数<code>end</code> : 表示要复制序列的结束位置，如为负值则从后向前计数。如省略该值，则复制到结尾位置。</li>
</ul>
<p><a href="http://30ke.cn/code/js-array-method/copyWithin">查看示例程序</a></p>
<h3 id="311-fill-填充函数">3.11 fill-填充函数</h3>
<p><code>Array.prototype.fill()</code>  用固定值填充起始索引到终止索引区间内的全部元素值，不包括终止索引。</p>
<pre><code class="language-js">var array1 = [1, 2, 3, 4];
console.log(array1.fill(9, 2, 4));    // 输出 [ 1, 2, 9, 9 ]
console.log(array1.fill(8, 1));      // 输出 [ 1, 8, 8, 8 ]
console.log(array1.fill(7));          // 输出 [ 7, 7, 7, 7 ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/fill">查看示例程序</a></p>
<h3 id="312-filter-过滤函数">3.12 filter-过滤函数</h3>
<p><code>Array.prototype.filter()</code> 生成由通过检测函数验证元素组成的新数组并返回。</p>
<pre><code class="language-js">var arr = [ 9 , 8 , 7 , 6];
console.log(arr.filter(x =&gt; x &gt;7));    //输出 [ 9, 8 ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/filter">查看示例程序</a></p>
<h3 id="313-flat-数组扁平化">3.13 flat-数组扁平化</h3>
<p><code>Array.prototype.flat()</code>  按指定深度递归遍历数组，并返回包含所有遍历到的元素组成的新数组。不改变原数组。</p>
<pre><code class="language-js">var arr1 = [ 1, 2, [ 3, 4 ] ];
console.log(arr1.flat());     // 输出 [ 1, 2, 3, 4 ]
var arr2 = [ 1, 2, [3, 4, [ 5, 6 ] ] ];
console.log(arr2.flat());    // 输出 [ 1, 2, 3, 4,  [ 5, 6 ] ]
var arr3 = [1, 2, [ 3, 4, [ 5, 6 ] ] ];
console.log(arr3.flat(2));    // 输出 [ 1, 2, 3, 4, 5, 6 ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/flat">查看示例程序</a></p>
<h3 id="314-map-映射">3.14 map-映射</h3>
<p><code>Array.prototype.map()</code>  创建一个新数组，该数组中的元素由原数组元素调用map函数产生。</p>
<pre><code class="language-js">var array1 = [1, 2, 3, 4];
console.log(array1.map(x =&gt; x * 2));    // 输出 [ 2, 4, 6, 8 ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/map">查看示例程序</a></p>
<h3 id="315-slice-截取数组">3.15 slice-截取数组</h3>
<p><code>Array.prototype.slice()</code> 按参数<code>begin</code> 和 <code>end</code> 截取数组，不改变原数组。</p>
<pre><code class="language-js">var array1 = [ 1, 2, 3, 4, 5];
console.log(array1.slice( 2, 4 ));    //输出 [ 3, 4 ]
console.log(array1);    //输出 [ 1, 2, 3, 4, 5 ]

</code></pre>
<p><a href="http://30ke.cn/code/js-array-method/slice">查看示例程序</a></p>
<h2 id="4-结尾">4 结尾</h2>
<h3 id="41-结语">4.1 结语</h3>
<p>文中介绍的过于简单，想更多理解相关内容还是要多多动手实践！</p>
<p>因时间不足，能力有限等原因，存在文字阐述不准及代码测试不足等诸多问题。如发现错误请不吝指正！谢谢。</p>
<p>作者：毛瑞_三十课链接：https://juejin.im/post/5cc792666fb9a03239689682来源：掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS作用域链的详解]]></title>
        <id>https://shuwenjunn.github.io/post/js-zuo-yong-yu-lian-de-xiang-jie/</id>
        <link href="https://shuwenjunn.github.io/post/js-zuo-yong-yu-lian-de-xiang-jie/">
        </link>
        <updated>2020-06-05T06:51:55.000Z</updated>
        <summary type="html"><![CDATA[<p>JavaScript 作用域属于静态概念，根据词法结构来确定，而不是根据执行来确定。作用域链是 JavaScript 提供的一套解决标识符的访问机制—— JavaScript 规定每一个作用域都有一个与之相关联的作用域链。.....</p>
]]></summary>
        <content type="html"><![CDATA[<p>JavaScript 作用域属于静态概念，根据词法结构来确定，而不是根据执行来确定。作用域链是 JavaScript 提供的一套解决标识符的访问机制—— JavaScript 规定每一个作用域都有一个与之相关联的作用域链。.....</p>
<!-- more -->
<p>作用域链用来在函数执行时求出标识符的值。该链中包含多个对象，在对标识符进行求值的过程中，会从链首的对象开始，然后依次查找后面的对象，直到在某个对象中找到与标识符名称相同的属性。如果在作用域链的顶端（全局对象）中仍然没有找到同名的属性，则返回 undefined 的属性值。</p>
<p>在每个对象中进行属性查找的时候，还会使用该对象的原型域链（后续将会讲解原型链）。在一个执行上下文，与其关联的作用域链只会被 with 语句和 catch 子句影响。</p>
<p>【实例1】在下面示例中，通过多层嵌套函数设计一个作用域链，在最内层函数中可以逐级访问外层函数的私有变量。</p>
<pre><code class="language-javascript">var a = 1;  //全局变量
(function () {
    var b = 2;  //第1层局部变量
    (function () {
        var c = 3;  //第2层局部变量
        (function () {
            var d = 4;  //第3层局部变量
            console.log(a + b + c + d);  //返回10
        }) ()  //直接调用函数
    }) ()  //直接调用函数
}) ()  //直接调用函数
</code></pre>
<p>在上面代码中，JavaScript 引擎首先在最内层活动对象中查询属性 a、b、c 和 d，从中只找到了属性 d，并获得它的值（4）；然后沿着作用域链，在上一层活动对象中继续查找属性 a、b 和 c，从中找到了属性 c，获取它的值（3）······以此类推，直到找到所有需要的变量值为止，如图所示。</p>
<figure data-type="image" tabindex="1"><img src="http://c.biancheng.net/uploads/allimg/190911/6-1Z91116302M18.gif" alt="img" loading="lazy"></figure>
<p>下面结合一个示例，通过函数的创建和激活两个阶段来介绍作用域链的创建过程。</p>
<h4 id="1-函数创建">1) 函数创建</h4>
<p>函数的作用域在函数定义的时候就已经确定。每个函数都有一个内部属性 [[scope]]，当函数创建的时候，[[scope]] 保存所有父变量对象的引用，[[scope]] 就是一个层级链。注意，[[scope]] 并不代表完整的作用域链。例如：</p>
<pre><code class="language-js">function f1() {
    function f2() {
        //...
    }
}
</code></pre>
<p>在函数创建时，每个函数的 [[scope]] 如下，其中 globalContext 表示全局上下文，VO 表示变量对象，f1Context 表示函数 f1 的上下文，AO 表示活动对象。</p>
<pre><code class="language-js">f1.[[scope]] = [
    globalContext.VO
];
f2.[[scope]] = [
    f1Context.AO,
    globalContext.VO
];
</code></pre>
<h4 id="2-函数激活">2) 函数激活</h4>
<p>当函数激活时，进入函数上下文，创建 VO/AO 后，就会将活动对象添加到作用域链的前端。这时如果命名执行上下文的作用域链为 Scope，则可以表示为：</p>
<pre><code class="language-js">Scope = [AO].concat([[scope]]);
</code></pre>
<p>至此，作用域链创建完毕。</p>
<p>【实例2】下面示例结合变量对象和执行上下文栈，总结函数执行上下文中作用域链和变量对象的创建过程。</p>
<pre><code class="language-js">var g = &quot;global scope&quot;;  //全局变量
function f() {  //声明函数
    var 1 = 'local scope';  //私有变量
    return 1;  //返回私有变量
}
f();  //调用函数
</code></pre>
<p>函数执行过程如下：</p>
<ol>
<li>f 函数被创建，保存作用域链到内部属性[[scope]]。</li>
</ol>
<pre><code class="language-js">f.[[scope]] = [  //当前函数的作用域链
    globalContext.VO  //全局上下文的变量对象
];
</code></pre>
<ol start="2">
<li>执行 f 函数，创建 f 函数的执行上下文，f 函数的执行上下文被压入执行上下文栈。</li>
</ol>
<pre><code class="language-js">ECStack = [  //执行上下文栈
    fContext,  //函数的执行上下文
    globalContext  //全局上下文
];
</code></pre>
<ol start="3">
<li>f 函数并不立刻执行，开始准备工作。准备工作包括以下 3 项：<br>
①复制函数 f 的 [[scope]] 属性，创建作用域链。</li>
</ol>
<pre><code class="language-js">fContext = {  //函数的执行上下文
    Scope : f.[[scope]],  //把函数的作用域添加到函数的执行上下文
}
</code></pre>
<p>②使用 arguments 创建活动对象，然后初始化活动对象，加入形参、声明函数、变量声明。</p>
<pre><code class="language-js">fContext = {  //函数的执行上下文
    AO : {  //函数的活动对象
        arguments : {  //为活动对象添加arguments
            length : 0
        },
        1 : undefined  //创建本地变量
    }
}
</code></pre>
<p>③将活动对象压入 f 作用域链顶端。</p>
<pre><code class="language-js">fContext = {  //函数的执行上下文
    AO : {  //活动对象
        arguments : {  //参数集合
            length : 0
        },
        1 : undefined  //本地变量
    },
    Scope : [AO, [[Scope]]]  //作用域链
}
</code></pre>
<ol start="4">
<li>准备工作做完，开始执行函数。随着函数的执行，修改 AO 的属性值。</li>
</ol>
<pre><code class="language-javascript">fContext = {  //函数的执行上下文
    AO : {  //活动对象
        arguments : {  //参数集合
            length : 0
        },  
        1 : 'local scope'  //初始化本地变量
    },
    Scope : [AO, [[Scope]]]  //作用域链
}
</code></pre>
<ol start="5">
<li>
<p>查找到本地变量 1 的值，然后返回 1 的值。</p>
</li>
<li>
<p>函数执行完毕，函数上下文从执行上下文栈中弹出。</p>
</li>
</ol>
<pre><code class="language-js">ECStack = [  //执行上下文栈
    globalContext  //全局上下文
];
</code></pre>
]]></content>
    </entry>
</feed>